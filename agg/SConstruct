env = Environment(
	CCFLAGS=['-std=c++14', '-O0', '-g', '-Wall'],
	CPPPATH=['agg-2.5/include']
)

# build library with x11 support

env.ParseConfig('pkg-config --cflags --libs x11')

agg_lib = env.StaticLibrary('agg', [
	Glob('agg-2.5/src/*.cpp'),
	Glob('agg-2.5/src/ctrl/*.cpp'),
	Glob('agg-2.5/src/platform/X11/*.cpp')
])

# examples
env.Program(['agg-2.5/examples/aa_demo.cpp', agg_lib])
env.Program(['agg-2.5/examples/aa_test.cpp', agg_lib])
env.Program(['agg-2.5/examples/line_patterns.cpp', agg_lib])
env.Program(['agg-2.5/examples/graph_test.cpp', agg_lib])
env.Program(['agg-2.5/examples/rasterizers.cpp', agg_lib])
env.Program(['agg-2.5/examples/circles.cpp', agg_lib])
env.Program(['agg-2.5/examples/conv_stroke.cpp', agg_lib])


# my samples
env.Program(['t01_rendering_buffer.cpp', agg_lib])
env.Program(['t02_pixel_formats.cpp', agg_lib])
env.Program(['t03_solar_spectrum.cpp', agg_lib])
env.Program(['t04_alpha_mask.cpp', agg_lib])
env.Program(['line_patterns.cpp', agg_lib])
env.Program(['pipeline_1.cpp', agg_lib])
env.Program(['pipeline_2.cpp', agg_lib])
env.Program(['pipeline_3.cpp', agg_lib])
env.Program(['pipeline_4.cpp', agg_lib])
env.Program(['pipeline_5.cpp', agg_lib])
env.Program(['pipeline_6.cpp', agg_lib])
env.Program(['pipeline_7.cpp', agg_lib])
env.Program(['render_poly.cpp', agg_lib])
env.Program(['graph_test.cpp', agg_lib])
env.Program(['render_primitives.cpp', agg_lib])
#env.Program(['conv_stroke.cpp', agg_lib])
env.Program(['pixfmt_test.cpp', agg_lib])

# program requires image-magick support
env_pattern = env.Clone()
env_pattern.ParseConfig('pkg-config --cflags --libs Magick++')

env_pattern.Program(['render_pattern_line.cpp', agg_lib])
env_pattern.Program(['load_ppm.cpp', agg_lib])
