# Live555 samples build script

#live_path = 'live'
#live_path = 'live_2017.07.18'

def build():
	live_path_20200819 = 'live_2020.08.19'

	cpp17 = create_env('-std=c++17', live_path_20200819)
	live555 = build_live(cpp17, live_path_20200819)

	cpp17.Program(['mkv_demux.cpp', live555])
	cpp17.Program(['testMKVStreamer.cpp', live555])
	cpp17.Program(['smooth_transition.cpp', live555])
	cpp17.Program(['multicast_h264.cpp', live555])
	cpp17.Program(['jpeg_no_new_source_stream.cpp', live555])
	cpp17.Program(['simple_jpeg_streaming.cpp', live555])
	cpp17.Program(['jpeg_one_frame.cpp', live555])
	cpp17.Program(['jpeg_stream.cpp', live555])
	cpp17.Program(['jpeg_multiple_source_stream.cpp', live555])
	cpp17.Program(['openRTSP.cpp', 'playCommon.cpp', live555])
	cpp17.Program(['testH264VideoStreamer.cpp', live555])
	cpp17.Program(['multicast_mkv.cpp', live555])
	cpp17.Program(['mkv_release.cpp', live555])
	cpp17.Program(['playground.cpp', live555])
	cpp17.Program(['rtp_mp3_streamer.cpp', live555])
	cpp17.Program(['mp3_streamer.cpp', live555])
	cpp17.Program(['only_rtsp_server.cpp', live555])
	cpp17.Program(['schedule_custom_task.cpp', live555])
	cpp17.Program(['rtsp_setup_handler.cpp', live555])
	cpp17.Program(['posponed_multicast.cpp', live555])
	cpp17.Program(['bare_mkv.cpp', live555])
	cpp17.Program(['multiple_mkv.cpp', live555])
	cpp17.Program(['jpeg_on_demand.cpp', live555])
	#cpp17.Program(['h264_streamer.cpp', live555])

	cpp17.Program([
		'jpeg_custom.cpp',
		'CustomOnDemandServerMediaSubsession.cpp',
		live555])

	cpp17.Program(['netaddresslist_test.cpp', live555])
	cpp17.Program(['rtsp_streamer.cpp', live555])



def create_env(cpp_std, live_path):
	live_includes = [
		'%s/groupsock/include' % live_path,
		'%s/UsageEnvironment/include' % live_path,
		'%s/BasicUsageEnvironment/include' % live_path,
		'%s/liveMedia/include' % live_path]

	env = Environment(
		CXXFLAGS=[cpp_std],
		CCFLAGS=['-m64', '-fPIC', '-Wall', '-Wextra', '-g', '-O0'],
		CPPDEFINES=['SOCKLEN_T=socklen_t', '_LARGEFILE_SOURCE=1', '_FILE_OFFSET_BITS=64',
			'BOOST_LOG_DYN_LINK'],
		CPPPATH=['.', live_includes],
		LIBS=['pthread', 'boost_log', 'boost_filesystem']
	)

	env.ParseConfig('pkg-config --cflags --libs openssl')

	return env

def build_live(env, live_path):
	groupsock_objs = env.Object([
		Glob('%s/groupsock/*.cpp' % live_path), Glob('%s/groupsock/*.c' % live_path)])

	usage_env_objs = env.Object([
		Glob('%s/UsageEnvironment/*cpp' % live_path),
		Glob('%s/BasicUsageEnvironment/*.cpp' % live_path)])

	live_media_objs = env.Object([
		Glob('%s/liveMedia/*.cpp' % live_path),
		Glob('%s/liveMedia/*.c' % live_path)])

	live555 = env.StaticLibrary(
		'%s/live555' % live_path, [groupsock_objs, usage_env_objs, live_media_objs])

	return live555


build()  # entry point
