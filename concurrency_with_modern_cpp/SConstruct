import os

gcc11 = Environment(
	CXXFLAGS=['-std=c++11', '-Wall', '-O0', '-g'],
	LIBS=['pthread'])

gcc14 = Environment(
	CXXFLAGS=['-std=c++14', '-Wall', '-O0', '-g'],
	LIBS=['pthread'])

gcc17 = Environment(
	CXXFLAGS=['-std=c++17', '-Wall', '-O0', '-g'],
	LIBS=['pthread'])

# prepare gcc toolchain for paraller algorithms
gcc92 = Environment(
	CXXFLAGS=['-std=c++17', '-Wall', '-O0', '-g'],
	LIBS=['pthread', 'tbb'],
	CXX='g++-9.2', CC='gcc-9.2')

gcc92.Append(ENV = {'PATH' : '/usr/local/gcc-9.2/bin:' + os.environ['PATH']})


clang11 = Environment(
	CXX='clang++', CC='clang',
	CXXFLAGS=['-std=c++11', '-Wall', '-O0', '-g'],
	LIBS=['pthread'])

clang17 = Environment(
	CXX='clang++', CC='clang',
	CXXFLAGS=['-std=c++17', '-Wall', '-O0', '-g'],
	LIBS=['pthread'])


gcc11.Program('spin_lock.cpp')
gcc11.Program('condition_var.cpp')

# multithreading
gcc11.Program('create_thread.cpp')
gcc11.Program('dead_lock.cpp')
gcc11.Program('unique_lock_dead_lock_resolved.cpp')
#gcc17.Program('scoped_lock_dead_lock_resolved.cpp')
gcc14.Program('reader_writer_lock.cpp')
gcc11.Program('call_once.cpp')
clang11.Program('call_once_singleton.cpp')
gcc11.Program('mayers_singleton.cpp')
gcc11.Program('thread_local_state.cpp')
gcc11.Program('async_vs_thread.cpp')
gcc11.Program('async_lazy.cpp')
gcc11.Program('fire_and_forget_futures.cpp')
gcc11.Program('async_dot_product.cpp')
gcc11.Program('packaged_task.cpp')
gcc11.Program('packaged_task_dot_product.cpp')
gcc11.Program('promise_future.cpp')
gcc14.Program('promise_wait_for.cpp')
gcc11.Program('shared_future.cpp')
gcc14.Program('promise_future_exception.cpp')
gcc14.Program('promise_future_synchronise.cpp')

# parallel algorithms of the standard library
gcc17.Program('exception_execution_policy.cpp')
gcc92.Program('new_algorithm.cpp')
